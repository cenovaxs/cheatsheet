Setting di awal:
	git --version = check versi git
	git config --global user.name "Your Name" = memasukkan nama pengguna
	git config --global user.email "yourname@somemail.eu" = memasukkan email pengguna
	git config --list = lihat configurasi(setting) seperti melihat nama, email
	git config --list --show-origin = liat setting dengan lokasi filenya
	
Setting git-VScode di awal :
	git config --global core.editor "code--wait"
	git config --global diff.tool "default-difftool"
	git config --global difftool.default-diftool.cmd "code --wait --diff \$LOCAL \$REMOTE"

Setting git os crossplatform di awal :
	git config --global core.autocrlf true = windows
	git config --global core.autocrlf input = mac/linux

Mengubah nama command:
	git config --global alias.<namacommandbaru> <namacommandlama>
		contoh 	git config --global alias.logone "log --oneline"
				git config --global alias.ko commit

bantuan:
	git help <verb> (cth git help config) atau 
	git <verb> --help (cth git config --help)
	
Mulai project git:
	git init = membuat folder git (hidden) di project dan jangan disentuh, kalau tidak mau pakai git tinggal hapus folder git
		git status = mengecek status git apakah aman atau ada yang baru dll
	git status -s = short yang lebih pendek 

Ignore files
	touch .gitignore = buat git ignore file. git ignore membuat daftar file yang akan dihiraukan oleh git (ekslusi)
	    contoh isi .gitignore :
	    *.backup
	    testfile.txt
	    *.test
		logs/dev.log

Working

	git checkout <namafile> = membatalkan safe, kemudian reload file
	git clean -df = membuang (untracked files) file yang ada di dalam folder proyek namun belum masuk ke staging
		keterangan 	-d = directory/folder
					-f = file
	git stash save "coment" = mengundo batalkan safe namun safe file di simpan di stash
	git stash list = melihat daftar stash yang ada
	git stash apply <namastash> = mengaplikasi perubahan yang ada dalam stash ke file
	git stash pop = mengaplikasi perubahan yang ada dalam stash paling atas dalam stash list ke dalam file dan menghapus stash tersebut
	git stash drop <namastash> = mendelete stash
	git stash clear = mendelete semua stash dan perubahannya yang sudah ke save menjadi terhapus

Staging


Tambah file ke staging:
	git add -A = tambah semua file dan folder ke staging
		atau
	git add --all
	git add . = tambah semua folder dan file yang ada dialamnya ke staging	
    git add namafile.typefile = untuk menambah file tertentu saja
	git add <dir/> = untuk menambah file yang ada di dalam folder saja
	git add -u = hanya menambah file yang sudah pernah diedit, file yang baru (untracked) tidak dimasukkan
		atau
	git add --update
	
    kemudian jangan lupa git status
	
Buang file dari staging ke working: 
	git reset = membuang semua file dari staging ke working 
	git reset somefile.js = buang hanya somefile.js saja dari staging ke working

	atau

	git restore <lokasi atau namafile> = menghapus file yang sudah disafe namun masih di working directory
	git restore -- staged <lokasi atau namafile> = mengubah file staged kembali ke sebelumnya

Delete file dari staging:
	git clean -fd = hapus file dengan cara kasar filenya gak bisa dikembalikan
	git rm <file> = hapus file dan remove dari staging


Commiting


    git status untuk mengecek apakah ada file yang mau di commit

memindahkan file dari staging ke commit:
	git commit -m "penjelasan" = memindahkan file dari staging ke commit, -m itu berguna untuk menulis penjelasan cepat melalui terminal

memindahkan file dari working langsung ke commit:
	git commit -am "pesan" = langsung ke commit dari working tanpa staging

Melihat perbedaan file:
	git diff = melihat perubahan di working directory
	git diff --staged = melihat perubahan di staged directory
	git difftool = melihat perubahan di working directory dengan vscode
	git difftool --staged = melihat perubahan di staged directory dengan vscode


log:
	git log = melihat commit yang sudah dilakukan sekaligus melihat hash commit, pembuat, tanggal
	git log --oneline = melihat log pendek
	git log --stat = berdasarkan perubahan dalam file
	git reflog = melihat log berdasarkan perubahan commit berguna untuk mencari commit yang sudah di hard reset namun masih dalam ada di garbage git (kurang lebih 30 hari)


Melihat commit:
	git show <hash> = melihat perubahan yang dibuat di commit <hash> bisa diganti head
	git show <hash>~X = melihat perubahan sebanyak X dari commit yang dipilih, misalnya mau lihat perubahan 3 commit terakhir maka x=2 

Melihat file hasil di commit:
	git show <hash>~X:bin/.gitignore = melihat hasil akhir commit yang dipilih
	
	atau

	git ls-tree <hash>~X = perlihatkan list perubahan dan type (commits, blob{file},tree{directory}, tags)
	git show <hash> = melihat hasil akhir file yang dipilih

Kembali ke commit sebelumnya:
	git restore --source=HEAD~1 <namafile> = kembalikan ke sebelumnya
	git reset --<mode> <hash> = mode (soft,mixed,hard) soft > perubahan masih ada di staging, mixed > perubahan masih ada namun di working, hard> hapus perubahan 
	
Pindah ke commit lain:
	git checkout <hash> -- <namafile>
	kemudian untuk kembali ada 2 cara :

		git restore --staged <file>
			kemudian
		git restore <file>
			atau
		git checkout <namabranch>

Membatalkan satu buah commit tertentu
git revert <hash> = membalikkan action commit

Mengedit commit tanpa membuat commit baru:
	git commit --amend 
		atau
	git commit --amend -m "gantikomen" = kalau mau ganti comment commit


Repository file (external)


Ambil repo dari github atau komputer lain: 
	git clone <url> <where to clone> = contoh git clone https://github.com/cenovaxs/cheatsheet/edit/main/Git ./folderlokal
    gak harus github.com bisa juga folder lain

melihat informasi tentang repo yang diambil dari luar:
	git remote -v = melihat nama repo dan alamat

tambah remote baru:
		git remote add <buatnamaremotebaru> <url>
	
	Sebelum push harus pull terlebih dulu untuk mencek file terbaru di repo:
		git pull <namarepo> <namabranch> contoh git pull origin master
	
	kemudian push (untuk pertama kali harus masukin username dan password):
		git push origin master - <origin> name of remote repo <master> the branch that we push to 
	


Branch


git branch --show-current = melihat posisi branch
git branch -a = melihat info branch lokal dan repo

Membuat branch:
	git branch <namabranchbaru>

Pindah ke branch lain:
	git checkout <namebranchlain>

Membuat dan pindah ke branch lain :
	git checkout -b <namabranchbaru>

Push branch baru untuk pertama kali gunakan:
	git push -u origin <namabranchbaru> = - u Upstream berarti menjadi default repo klo push

Menggabungkan branch:
	git checkout master
	git pull origin master
	git branch --merged = melihat informasi branch yang sudah di merge
	git merge <namabranch> = merge namabranch ke branch yang sedang di checkout dalam hal ini master, untuk git lokal 
	git push origin master = merge branch ke repository

membuang branch:
	git branch -d <namabranchyangmaudibuang> = membuang branch yang ada di lokal
	git branch -a 
	git push origin --delete <namabranchyangmaudibuang> = membuang branch yang ada di repo

salah commit ke branch lain
	git checkout <hashbranchyangmaudicommit>
	git cherry-pick <hashbranchyangsalahdimain> = mengcopy sebuah komit pada satu branch ke branch lain
	git checkout <main>
	git reset --<mode> <hashmainsebelumdicommit>


memindahkan base (rebase) agar satu flow aja:
	git checkout <namabranch>
		kemudian
	git rebase master
		kemudian
	git checkout master
		kemudian
	git rebase <namabranch>
		kemudian
	git push origin master
	
Cari siapa yang bikin:
	git blame <file>