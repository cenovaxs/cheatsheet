Menjalankan docker
systemctl start docker

Mengecek status docker
systemclt status docker

lihat info docker
$ docker info

lihat versi docker
$ docker version 

Lihat list images yang ada di komp
$ docker images

Hapus image
$ docker image rm <imageid/nama:tag>

Lihat container yang sedang jalan
$ docker ps
    atau
$ docker ls = ls lebih baru

lihat semua container yang ada jalan atau matikan
$ docker ps -a
    atau
$ docker ls --all

membuat container
$ docker container create --name <namacontainerbaru> <image>:<tag>

membuat container yang menghubungkan beberapa container lain 
$ docker network create <namanetwork> 
    lalu
$ docker network connect <namanetwork> <contaner1>
    lalu
$ docker network connect <namanetwork> <contaner2>
    lalu
$ docker network connect <namanetwork> <contaner3>
    lalu check apakah mereka sudah tergabung ke network yang sama dengan cara
    $ docker inspect <container> = satu persatu
    check di bagian network apakah <namanetwork> sudah berada didalam

    test apakah network berhasil contoh mengunakan environment:
    $ docker container create --name <namacontainerbaru> -p <portcontluar>:<portcontdalam> -e <Host1var>=<containerHost1> -e <port1var>=<portluarhost1> -e <Host2var>=<containerHost2> -e <port2var>=<portluarhost2> <image>:<tag>
        kemudian
    $ docker container start <namacontainerbaru> <containerHost1> <containerHost2>


menjalankan container
$ docker container start <namacontainer>

menjalankan app
$ docker start <namaapp>

menghentikan app
$ docker stop <namaapp>
    bisa dua atau lebih
$ docker stop <namaapp1> <namaapp2>

menghapus container
$ docker container rm <namaapp>

menyimpan container menjadi image baru
$ docker commit <containeryangmaudijadikanimage> <namaimagebaru:tag>

membuat image dengan dockerfile
taroh semua file yang mau dijadikan image ke dalam satu folder
buat perintah menjalankan file tersebut dalam bentuk dockerfile
$ docker build --tag <namaimagebaru:tag> /folderyangadafiletsb

push image ke repo (dockerhub)
create new repo di website dockerhub nanti dapat docker command contoh : $ docker push cenovaxs/kali:1.0
buat tag supaya lokal = repo $ docker tag kali:1.0 cenovaxs/kali:1.0
$ docker login <urlrepo> = kalau kosong dia otomatis ke https://hub.docker.com
kemudian masukan username dan password lalu
masukin docker push yang dikasih waktu create new repo di website contoh : $ docker push cenovaxs/kali:1.0

mengganti nama container
$ docker rename <CONTAINERNAME> <containernewname>

cari images dalam repository dockerhub
$ docker search <katakunci>

download docker images dari repository
$ docker pull <image>:<tag>
    contoh install kali linux $ docker pull kalilinux/kali-linux-docker:<arm64>

download docker images dari github
$ docker run --name repo alpine/git clone https://github.com/docker/getting-started.git

menjalankan image
$ docker run <aplikasi>
-h $ docker run -h "<rename>" <aplikasi> = mengubah nama id menjadi yang kita mau
-t $ docker run -t <aplikasi> = menjalankan dalam tty terminal
-i $ docker run -i <aplikasi> = kasih lihat proggress docker dalam layar
-d $ docker run -d <aplikasi> = daemon mode (jalan di background)
-p $ docker run -p <portluar>:<portdalam> <aplikasi> = set port yang digunakan container
    kalu mau buka multiple port maka :
   $ docker run -p <portluar1>:<portdalam1> -p <portluar2>:<portdalam2> <aplikasi> 
/bin/bash $ $ docker run <aplikasi> /bin/bash = mensetting agar menggunakan bash sebagai default

membuat ubuntu container dalam ubuntu
$ docker run -it ubuntu bash

membuat kalilinux container dalam ubuntu
$ docker pull kalilinux/kali-linux-docker
$ docker run -h "kali" -it kalilinux/kali-rolling /bin/bash

membuat kalilinux untuk bisa diakses melalui ssh dari luar
$ docker run -h "kali" -p <portlokal>:22 -it kalilinux/kali-rolling /bin/bash
$ passwd root
$ apt update
$ apt full-upgrade
$ apt install openssh-server
$ apt install nano
$ apt install net-tools
$ nano /etc/ssh/sshd_config
    masukkan "PermitRootLogin yes" dibawah #PermitRootLogin prohibit-password
        kemudian safe changes
$ service ssh start
$ netstat -ant = untuk check apakah sudah berjalan
$ ssh -p <portlokal> root@<iplokal>

mengeksekusi atau mengedit container dalam docker (menjalankan os)
docker exec -it <container name> /bin/bash = kalau keluar container tetap jalan
docker attach <container name> = kalau keluar container mati

mengecek semua hal yang berhubungan dengan container yang sedang berjalan dalam json
$ docker inspect <container_name>

mengecek ip address docker container
$ docker inspect -f "{{ .NetworkSettings.IPAddress }}" <container_name>

Apply group sudo agar tidak perlu mengetik sudo dalam docker
$ sudo usermod -aG docker <user> 
    atau
$ sudo usermod -aG docker $USER  
    kalau diatas gak bisa maka harus bikin docker group dulu
        $ sudo groupadd docker

Membuang container
$ docker rm <containerid> = membuang sebuah spesifik container
$ docker container prune = membuang semua container yang sedang nonaktif

Membuang image docker
$ docker rmi <namaimage/imageid>

Docker Windows ganti lokasi Harddisk

docker dalam windows diatur oleh wsl2 (cpu,ram,harddisk) maka untuk mengatur hal tersebut harus melalui wsl2 bukan docker

The WSL 2 docker-desktop-data vm disk image would normally reside in: %USERPROFILE%\AppData\Local\Docker\wsl\data\ext4.vhdx

Follow the following to relocate it to other drive/directory, with all existing docker data preserved (tested against Docker Desktop 2.3.0.4 (46911), and continued to work after updating the 3.1.0 (51484)):

First, shut down your docker desktop by right click on the Docker Desktop icon and select Quit Docker Desktop

Then, open your command prompt:

wsl --list -v
You should be able to see, make sure the STATE for both is Stopped.(wsl  --shutdown)

  NAME                   STATE           VERSION
* docker-desktop         Stopped         2
  docker-desktop-data    Stopped         2
Export docker-desktop-data into a file

wsl --export docker-desktop-data "D:\Docker\wsl\data\docker-desktop-data.tar"
Unregister docker-desktop-data from wsl, note that after this, your ext4.vhdx file would automatically be removed (so back it up first if you have important existing image/container):

wsl --unregister docker-desktop-data
Import the docker-desktop-data back to wsl, but now the ext4.vhdx would reside in different drive/directory:

wsl --import docker-desktop-data "D:\Docker\wsl\data" "D:\Docker\wsl\data\docker-desktop-data.tar" --version 2
Start the Docker Desktop again and it should work

You may delete the D:\Docker\wsl\data\docker-desktop-data.tar file (NOT the ext4.vhdx file) if everything looks good for you after verifying